<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog</title>
    <description>How did I do
</description>
    <link>http://shrikanthkr.github.io/</link>
    <atom:link href="http://shrikanthkr.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 19 Sep 2017 23:42:06 +0530</pubDate>
    <lastBuildDate>Tue, 19 Sep 2017 23:42:06 +0530</lastBuildDate>
    <generator>Jekyll v3.5.2</generator>
    
      <item>
        <title>Basics of Easing Animations in android</title>
        <description>&lt;p&gt;An easing function describes the value of a property given a percentage of completeness. Thanks to &lt;a href=&quot;https://www.linkedin.com/in/robertpenner&quot;&gt;Robert Penner&lt;/a&gt; for defining equations which drove animations with ease. &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;How do we do this android ? First lets see how we do animations with ValueAnimator.&lt;/p&gt;

&lt;h4&gt;Setting up Activity&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;app/package.name/MainActivity.java
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;Button click;
View view;
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
    view = (View)findViewById(R.id.view);
    click = (Button)findViewById(R.id.button);
    click.setOnClickListener(clickListener);
}
View.OnClickListener clickListener = new View.OnClickListener() {
    @Override
    public void onClick(View v) {
        ease();&lt;br&gt;
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Our XML layout&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;View
    android:id=&amp;quot;@+id/view&amp;quot;
    android:layout_width=&amp;quot;80dp&amp;quot;
    android:layout_height=&amp;quot;80dp&amp;quot;
    android:background=&amp;quot;@android:color/holo_blue_bright&amp;quot;/&amp;gt;
&amp;lt;Button
    android:id=&amp;quot;@+id/button&amp;quot;
    android:text=&amp;quot;Click&amp;quot;
    android:layout_width=&amp;quot;match_parent&amp;quot;
    android:layout_alignParentBottom=&amp;quot;true&amp;quot;
    android:layout_height=&amp;quot;60dp&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;h4&gt;Setup simple Animation&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/animation/ValueAnimator.html&quot;&gt;ValueAnimator&lt;/a&gt; class provides a simple timing engine for running animations which calculate animated values and set them on target objects .
&lt;a href=&quot;http://developer.android.com/reference/android/animation/AnimatorSet.html&quot;&gt;AnimatorSet&lt;/a&gt; class plays a set of Animator objects in the specified order. Animations can be set up to play together, in sequence, or after a specified delay.&lt;/p&gt;

&lt;p&gt;We will be using these two classes to make our first animation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/package.name/MainActivity.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;private void ease() {
    AnimatorSet animatorSet = new AnimatorSet();
    ValueAnimator valueAnimatorX = ValueAnimator.ofFloat(fromX,toX, fromX);
    valueAnimatorX.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {
        @Override
        public void onAnimationUpdate(ValueAnimator animation) {
            view.setTranslationX((float) animation.getAnimatedValue());
        }
    });
    animatorSet.playTogether(valueAnimatorX);
    animatorSet.setDuration(1500);
    animatorSet.start();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;center&gt; &lt;img src=&quot;/assets/article_images/easing-animations-android/linear.gif&quot; alt=&quot;Linear Animation&quot;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;This animations seems so boring. We need somthing cool.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Easing to make it awesome&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://developer.android.com/reference/android/animation/ValueAnimator.html&quot;&gt;ValueAnimator&lt;/a&gt; class accepts an evaluator, which defines on how the value is derived. So we make use of &lt;code&gt;setEvaluator&lt;/code&gt; function and put our easing equations there to get the desired animation.&lt;/p&gt;

&lt;p&gt;So make a class &lt;code&gt;Easing&lt;/code&gt; implementing TypeEvaluator&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/package.name/Easing.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;public class Easing implements TypeEvaluator&amp;lt;Number&amp;gt; {
    @Override
    public Number evaluate(float fraction, Number startValue, Number endValue) {
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we have the evaluate methods which tell the &lt;code&gt;ValueAnimator&lt;/code&gt; on how it should evaluate.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/package.name/Easing.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;/**   &lt;br&gt;
* Converts params to calculate easing values&lt;br&gt;
* @param fraction&lt;br&gt;
* @param startValue&lt;br&gt;
* @param endValue&lt;br&gt;
* @return&lt;br&gt;
*/&lt;br&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;@Override
public Number evaluate(float fraction, Number startValue, Number endValue) {
    float t = duration * fraction;
    float b = startValue.floatValue();
    float c = endValue.floatValue() - startValue.floatValue();
    float d = duration;
    float result = calculate(t,b,c,d);
    return result;

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What&amp;#39;s the calculate method here? 
This method decides which easing equation we are going to use. There is a lot mentioned about equations &lt;a href=&quot;http://gizma.com/easing/&quot;&gt;here&lt;/a&gt;. You can edit this method based on any of the equations given and get your desired animation.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/package.name/Easing.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;/**&lt;br&gt;
*&lt;br&gt;
* @param t - Current Time&lt;br&gt;
* @param b - Start Value&lt;br&gt;
* @param c - Change in value&lt;br&gt;
* @param d - Duration&lt;br&gt;
* @return value calculated for cubic ease-in-out&lt;br&gt;
*/&lt;br&gt;&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;public float calculate(float t, float b, float c, float d){
    t /= d/2;
    if (t &amp;lt; 1) {
        return c/2*t*t*t + b;
    }
    t -= 2;
    return c/2*(t*t*t + 2) + b;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;h4&gt;Update MainAcvitity&lt;/h4&gt;

&lt;p&gt;Now we are good with the &lt;code&gt;Easing&lt;/code&gt; class and ready to include it in our &lt;code&gt;ValueAnimator&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/package.name/MainActvity.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;private void ease() {
    Easing easing = new Easing(1500);
    ...
    valueAnimatorX.setEvaluator(easing);
    valueAnimatorX.addUpdateListener(...)
    ...
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Uh! is that enough ? 
&lt;table&gt;
    &lt;tr&gt;
    &lt;td&gt;
        &lt;center&gt; &lt;img src=&quot;/assets/article_images/easing-animations-android/linear.gif&quot; alt=&quot;Linear Animation&quot;&gt;&lt;/center&gt;
    &lt;/td&gt;
    &lt;td&gt;
        &lt;center&gt; &lt;img src=&quot;/assets/article_images/easing-animations-android/ease.gif&quot; alt=&quot;Easing Animation&quot;&gt;&lt;/center&gt;
    &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Find the source code of the entire sample over here, &lt;a href=&quot;https://github.com/shrikanthkr/SimpleEasingAndroid&quot;&gt;Easing on Android&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/daimajia/AnimationEasingFunctions&quot;&gt;AnimationEasingFunctions&lt;/a&gt; seems an awesome library to make easing animatons easier and lively.&lt;/p&gt;
</description>
        <pubDate>Thu, 12 Nov 2015 20:04:25 +0530</pubDate>
        <link>http://shrikanthkr.github.io/android/2015/11/12/easing-animations-android.html</link>
        <guid isPermaLink="true">http://shrikanthkr.github.io/android/2015/11/12/easing-animations-android.html</guid>
        
        <category>android,</category>
        
        <category>easing,</category>
        
        <category>animation</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>CRUD on Android with Firebase API</title>
        <description>&lt;p&gt;Firebase provides a powerful API to &lt;strong&gt;store, retrieve and sync&lt;/strong&gt; data in realtime, which paves way for an accelerated development reducing the pain of setting up your backend. In this post we will get a quick glance of making a CRUD with &lt;a href=&quot;https://www.firebase.com/docs/android/&quot;&gt;Firebase Android SDK&lt;/a&gt;. Firebase also provides you with a &lt;a href=&quot;https://www.firebase.com/docs/android/quickstart.html&quot;&gt;Quick Start&lt;/a&gt; guide to get on with its SDKs. &lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Once you have an account with &lt;a href=&quot;https://www.firebase.com/&quot;&gt;Firebase&lt;/a&gt;, create an &lt;code&gt;app&lt;/code&gt; and note down the &lt;code&gt;app&amp;#39;s&lt;/code&gt; URL. This &lt;code&gt;app&lt;/code&gt; URL will be used in our android application as the base URL to firebase.&lt;/p&gt;

&lt;h4&gt;Adding Dependencies&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;app/build.gradle
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;dependencies {
    compile &amp;#39;com.firebase:firebase-client-android:2.3.1+&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Incase you end up with build errors, &lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;android {
    ...
    packagingOptions {
    exclude &amp;#39;META-INF/LICENSE&amp;#39;
    exclude &amp;#39;META-INF/LICENSE-FIREBASE.txt&amp;#39;
    exclude &amp;#39;META-INF/NOTICE&amp;#39;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;h4&gt;Adding Permissions&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;app/src/main/AndroidManifest.xml 
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr&gt;

&lt;h4&gt;Necessary Layout Components&lt;/h4&gt;

&lt;p&gt;Two &lt;code&gt;EditText&lt;/code&gt; components,  a &lt;code&gt;ListView&lt;/code&gt; and a &lt;code&gt;Button&lt;/code&gt;. These &lt;code&gt;EditText&lt;/code&gt; components holds the &lt;code&gt;name&lt;/code&gt;(key) and the &lt;code&gt;message&lt;/code&gt;(value) to be saved. &lt;code&gt;Button&lt;/code&gt; is used to trigger the save action using &lt;strong&gt;Firebase&lt;/strong&gt; sdk and a &lt;code&gt;ListView&lt;/code&gt; to display the data.
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;EditText
    android:layout&lt;em&gt;width=&amp;quot;fill&lt;/em&gt;parent&amp;quot;
    android:layout&lt;em&gt;height=&amp;quot;60dp&amp;quot;
    android:hint=&amp;quot;Enter Name&amp;quot;
    android:id=&amp;quot;@+id/name&amp;quot;
    android:layout&lt;/em&gt;marginTop=&amp;quot;10dp&amp;quot;
    android:layout&lt;em&gt;alignParentLeft=&amp;quot;true&amp;quot;
    android:layout&lt;/em&gt;alignParentStart=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;EditText
    android:layout&lt;em&gt;width=&amp;quot;fill&lt;/em&gt;parent&amp;quot;
    android:layout&lt;em&gt;height=&amp;quot;60dp&amp;quot;
    android:hint=&amp;quot;Enter Message&amp;quot;
    android:layout&lt;/em&gt;marginTop=&amp;quot;10dp&amp;quot;
    android:id=&amp;quot;@+id/message&amp;quot;
    android:layout&lt;em&gt;below=&amp;quot;@+id/name&amp;quot;/&amp;gt;
&amp;lt;Button
    android:layout&lt;/em&gt;width=&amp;quot;wrap&lt;em&gt;content&amp;quot;
    android:layout&lt;/em&gt;height=&amp;quot;wrap&lt;em&gt;content&amp;quot;
    android:text=&amp;quot;Save&amp;quot;
    android:id=&amp;quot;@+id/save&amp;quot;
    android:layout&lt;/em&gt;below=&amp;quot;@+id/message&amp;quot;
    android:layout&lt;em&gt;marginTop=&amp;quot;10dp&amp;quot;
    android:layout&lt;/em&gt;centerHorizontal=&amp;quot;true&amp;quot;/&amp;gt;
&amp;lt;ListView
    android:layout&lt;em&gt;width=&amp;quot;wrap&lt;/em&gt;content&amp;quot;
    android:layout&lt;em&gt;height=&amp;quot;fill&lt;/em&gt;parent&amp;quot;
    android:id=&amp;quot;@+id/listView&amp;quot;
    android:layout&lt;em&gt;below=&amp;quot;@+id/save&amp;quot;
    android:layout&lt;/em&gt;alignParentLeft=&amp;quot;true&amp;quot;
    android:layout_alignParentStart=&amp;quot;true&amp;quot;/&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Saving data on Firebase - Create&lt;/h4&gt;

&lt;p&gt;Declare necessary attributes.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;Button save;
static Firebase myFirebaseRef;
EditText nameEditText;
EditText messageEditText;
ProgressBar progressBar;
static final String TAG = &amp;quot;Main Acvity&amp;quot;;
ArrayAdapter&amp;lt;String&amp;gt; valuesAdapter;
ArrayList&amp;lt;String&amp;gt; displayArray;
ArrayList&amp;lt;String&amp;gt; keysArray;
ListView listView;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The OnCreate Function&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);

    /*View bindings*/
    save = (Button)findViewById(R.id.save);
    nameEditText = (EditText)findViewById(R.id.name);
    messageEditText= (EditText)findViewById(R.id.message);
    progressBar = (ProgressBar)findViewById(R.id.progressBar);
    listView = (ListView)findViewById(R.id.listView);

    /*Variable Initialization*/
    displayArray  = new ArrayList&amp;lt;&amp;gt;();
    keysArray = new ArrayList&amp;lt;&amp;gt;();
    valuesAdapter = new ArrayAdapter&amp;lt;String&amp;gt;(this,android.R.layout.simple_list_item_1,android.R.id.text1,displayArray);
    listView.setAdapter(valuesAdapter);
    /*listView.setOnItemClickListener(itemClickListener);*/
    save.setOnClickListener(this);

    /*Firebase Initialization*/
    Firebase.setAndroidContext(this);
    myFirebaseRef = new Firebase(&amp;quot;&amp;lt;appurl&amp;gt;&amp;quot;);
    /*myFirebaseRef.addChildEventListener(childEventListener);*/
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Adding click Listener to fire save action&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;@Override
public void onClick(View v) {
    switch (v.getId()){
        case R.id.save:
            String nameString = nameEditText.getText().toString();
            String messageString = messageEditText.getText().toString();
            save(nameString,messageString);
        break;
    }
}

private void save(String name,String message){
    myFirebaseRef.child(name).setValue(message, new Firebase.CompletionListener() {
        @Override
        public void onComplete(FirebaseError firebaseError, Firebase firebase) {
            nameEditText.setText(&amp;quot;&amp;quot;);
            messageEditText.setText(&amp;quot;&amp;quot;);
        }
    });
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have saved our data to firebase and on our onComplete method above we empty the &lt;code&gt;edittext&lt;/code&gt; boxes. So where do we actually read our data and update the view?&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Read data from Firebase - Read&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Firebase&lt;/strong&gt; provides a ChildEventListener which pops up when ever a change occurs to the specified child to which the event is bound. In our case we bind it to the &lt;code&gt;myFirebaseRef&lt;/code&gt;, which is commented out initially on our &lt;code&gt;onCreate&lt;/code&gt; method. &lt;/p&gt;

&lt;p&gt;Events which we could listen to are &lt;code&gt;onChildAdded&lt;/code&gt;, &lt;code&gt;onChildChanged&lt;/code&gt;, &lt;code&gt;onChildRemoved&lt;/code&gt;, &lt;code&gt;onChildMoved&lt;/code&gt;, &lt;code&gt;onCancelled&lt;/code&gt;. &lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;ChildEventListener childEventListener = new ChildEventListener() {
    @Override
    public void onChildAdded(DataSnapshot dataSnapshot, String s) {
        Log.d(TAG, dataSnapshot.getKey() + &amp;quot;:&amp;quot; + dataSnapshot.getValue().toString());
        String keyAndValue = &amp;quot;Key: &amp;quot; +dataSnapshot.getKey().toString() + &amp;quot;\t Value: &amp;quot; +     dataSnapshot.getValue().toString();
        displayArray.add(keyAndValue);
        keysArray.add(dataSnapshot.getKey().toString());
        updateListView();
    }
    @Override
    public void onChildChanged(DataSnapshot dataSnapshot, String s) {}
    @Override
    public void onChildRemoved(DataSnapshot dataSnapshot) {}
    @Override
    public void onChildMoved(DataSnapshot dataSnapshot, String s) { }
    @Override
    public void onCancelled(FirebaseError firebaseError) {}
};

private void updateListView(){
    valuesAdapter.notifyDataSetChanged();
    listView.invalidate();
    Log.d(TAG, &amp;quot;Length: &amp;quot; + displayArray.size());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Whenever a new child is added &lt;code&gt;onChildAdded&lt;/code&gt; will get triggered and the view is updated corresponding to the received data.&lt;/p&gt;

&lt;hr&gt;

&lt;h4&gt;Listen for changes in the child - Update&lt;/h4&gt;

&lt;p&gt;As we had seen, the above code provides a method to listen on changes made to the child data. We update our code on &lt;code&gt;onChildChanged&lt;/code&gt; method to publish updates and show it to the user.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;@Override
public void onChildChanged(DataSnapshot dataSnapshot, String s) {
    String changedKey = dataSnapshot.getKey();
    int changedIndex = keysArray.indexOf(changedKey);
    String keyAndValue = &amp;quot;Key: &amp;quot; +dataSnapshot.getKey().toString() + &amp;quot;\t Value: &amp;quot; + dataSnapshot.getValue().toString();
    displayArray.set(changedIndex,keyAndValue);
    updateListView();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;h4&gt;Deleting a child - Delete&lt;/h4&gt;

&lt;p&gt;Now we uncomment &lt;code&gt;itemClickListener&lt;/code&gt; for the listview. On click of an item in list view we delete the data based on the given &lt;code&gt;name&lt;/code&gt;(Key).&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;AdapterView.OnItemClickListener itemClickListener = new AdapterView.OnItemClickListener() {
    @Override
    public void onItemClick(AdapterView&amp;lt;?&amp;gt; parent, View view, int position, long id) {
        String clickedKey = keysArray.get(position);
        myFirebaseRef.child(clickedKey).removeValue();
    }
};&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And again we override the &lt;code&gt;onChildRemoved&lt;/code&gt; function and update the view&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;@Override
public void onChildRemoved(DataSnapshot dataSnapshot) {
    String deletedKey = dataSnapshot.getKey();
    int removedIndex = keysArray.indexOf(deletedKey);
    keysArray.remove(removedIndex);
    displayArray.remove(removedIndex);
    updateListView();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;You can find the source code of the entire sample over here, &lt;a href=&quot;https://github.com/shrikanthkr/FirebaseCRUD&quot;&gt;Firebase CRUD&lt;/a&gt; with few miscellaneous functions,&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 20:04:25 +0530</pubDate>
        <link>http://shrikanthkr.github.io/android/2015/09/09/firebase-crud-android.html</link>
        <guid isPermaLink="true">http://shrikanthkr.github.io/android/2015/09/09/firebase-crud-android.html</guid>
        
        <category>android,</category>
        
        <category>firebase,</category>
        
        <category>firebase</category>
        
        <category>android,</category>
        
        <category>firebase</category>
        
        <category>sdk</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Basics of Android GCM</title>
        <description>&lt;p&gt;Google Cloud Messaging (GCM) is a service that enables developers to send data from servers to both &lt;code&gt;Android&lt;/code&gt; applications or &lt;code&gt;Chrome&lt;/code&gt; apps and extensions. &lt;a href=&quot;https://en.wikipedia.org/wiki/Google_Cloud_Messaging&quot;&gt;Wikipedia&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;GCM basics involves four steps&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Registering the client (Android Device)&lt;/li&gt;
&lt;li&gt;Provide the registration ID to server&lt;/li&gt;
&lt;li&gt;Send notifications from Server to GCM with registration ID&lt;/li&gt;
&lt;li&gt;Receive notifications on the client&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Prerequisite&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Project Number (&lt;em&gt;845696541232&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;Server API Key (&lt;em&gt;XIzaSyBDRJ00YJbTE011CbWWjlcKYUGI3eLccdI&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Refer to &lt;a href=&quot;https://developers.google.com/console/help/new/#creatingdeletingprojects&quot;&gt;Create Project&lt;/a&gt; on creating a new project and &lt;a href=&quot;https://developers.google.com/console/help/new/#api-keys&quot;&gt;Generate API Key&lt;/a&gt; for generating a Server key(API Key)&lt;/p&gt;

&lt;p&gt;Once we have all the required data we can start with our client registration process.&lt;/p&gt;

&lt;h4&gt;Creating a new Project&lt;/h4&gt;

&lt;p&gt;Ensure that we have the necessary dependencies added.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/build.gradle&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;dependencies {
    compile fileTree(dir: &amp;#39;libs&amp;#39;, include: [&amp;#39;*.jar&amp;#39;])
    compile &amp;#39;com.android.support:appcompat-v7:21.0.3&amp;#39;
    compile &amp;#39;com.google.android.gms:play-services:6.5.87&amp;#39;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;Adding Permissions&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/src/main/Androidmanifest.xml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;manifest xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;
    ...
    &amp;lt;uses-permission android:name=&amp;quot;android.permission.INTERNET&amp;quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&amp;quot;android.permission.WAKE_LOCK&amp;quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&amp;quot;com.google.android.c2dm.permission.RECEIVE&amp;quot; /&amp;gt;
    &amp;lt;permission android:name=&amp;quot;com.example.gcm.permission.C2D_MESSAGE&amp;quot; android:protectionLevel=&amp;quot;signature&amp;quot; /&amp;gt;
    &amp;lt;uses-permission android:name=&amp;quot;com.example.gcm.permission.C2D_MESSAGE&amp;quot; /&amp;gt;
    ...      
&amp;lt;/manifest&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;h4&gt;Registering the client (Android Device)&lt;/h4&gt;

&lt;p&gt;The client part has an interface with a registration button. On click of the button a call to GCM is made and &lt;code&gt;Registration ID&lt;/code&gt; is obtained. While making the request it is necessary to note that we have the correct &lt;em&gt;&lt;strong&gt;Project Number&lt;/strong&gt;&lt;/em&gt; from the developers console.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;res/layout/activity_main.xml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;RelativeLayout xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;
                xmlns:tools=&amp;quot;http://schemas.android.com/tools&amp;quot;
                android:layout_width=&amp;quot;match_parent&amp;quot;
                android:layout_height=&amp;quot;match_parent&amp;quot;
                android:paddingLeft=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
                android:paddingRight=&amp;quot;@dimen/activity_horizontal_margin&amp;quot;
                android:paddingTop=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
                android:paddingBottom=&amp;quot;@dimen/activity_vertical_margin&amp;quot;
                tools:context=&amp;quot;.MainActivity&amp;quot;&amp;gt;
    &amp;lt;Button
        android:layout_width=&amp;quot;wrap_content&amp;quot;
        android:layout_height=&amp;quot;wrap_content&amp;quot;
        android:text=&amp;quot;Register&amp;quot;
        android:id=&amp;quot;@+id/register&amp;quot;
        android:layout_below=&amp;quot;@+id/textView&amp;quot;
        android:layout_centerHorizontal=&amp;quot;true&amp;quot;
        android:layout_marginTop=&amp;quot;117dp&amp;quot;/&amp;gt;

&amp;lt;/RelativeLayout&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;src/main/java/.../MainActivity.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Declaring necessary variables and functions&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;Button register_button;
String PROJECT_NUMBER = &amp;quot;845696541232&amp;quot;;
GoogleCloudMessaging gcmObj;
String regId;

 protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    register_button = (Button) findViewById(R.id.register);
    register_button.setOnClickListener(new View.OnClickListener() {
      @Override
      public void onClick(View v) {
        registerInBackground();
      }
    });&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;Writing the registration function&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;private void registerInBackground() {
    new AsyncTask&amp;lt;Void, Void, String&amp;gt;() {
        @Override
        protected String doInBackground(Void... params) {
            String msg = &amp;quot;&amp;quot;;
            try {
                gcmObj = GoogleCloudMessaging.getInstance(getApplicationContext());
                regId = gcmObj.register(PROJECT_NUMBER);
                msg = &amp;quot;Registration ID :&amp;quot; + regId;
            } catch (IOException ex) { msg = ex.getMessage();}
            return msg;
        }
        @Override
        protected void onPostExecute(String msg) {
            Toast.makeText(getApplicationContext(),&amp;quot;Registered with GCM Server successfully.\n\n&amp;quot;+ msg, Toast.LENGTH_SHORT).show();
            Log.d(&amp;quot;MainActivity&amp;quot;, regId);
        }
    }.execute(null, null, null);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;h4&gt;Provide the registration ID to server&lt;/h4&gt;

&lt;p&gt;Once the registration is successful,  &lt;code&gt;Registration ID&lt;/code&gt; is obtained. This &lt;code&gt;Registration ID&lt;/code&gt; is used by the server to send notifications to device. In our sample the &lt;code&gt;Registration ID&lt;/code&gt; printed in logs is copied and used in the server part.&lt;/p&gt;

&lt;h4&gt;Send notifications from Server to GCM with &lt;em&gt;Registration ID&lt;/em&gt; (Server Part)&lt;/h4&gt;

&lt;p&gt;The sample server code here is written in Nodejs. Using &lt;code&gt;node-gcm&lt;/code&gt; library we can easily send messages to &lt;strong&gt;GCM&lt;/strong&gt;. The server part includes two files. &lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;package.json&lt;/li&gt;
&lt;li&gt;node-gcm-sample.js&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;package.json&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;{
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;node-gcm&amp;quot;: &amp;quot;git+https://github.com/ToothlessGear/node-gcm.git&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;node-gcm-sample.js&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;var gcm = require(&amp;#39;node-gcm&amp;#39;);
var message = new gcm.Message();
message.addData(&amp;#39;key1&amp;#39;, &amp;#39;Awesome World!!&amp;#39;); /*Message to the client*/

var regIds = [&amp;#39;COPIED_ID_FROM_ANDROID_LOGS&amp;#39;];
var sender = new gcm.Sender(&amp;#39;SERVER_API_KEY&amp;#39;);

sender.send(message, { registrationIds: regIds } , function (err, result) {
  if(err) console.error(err);
  else    console.log(result);
});&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;Create both the files in a project folder, and execute &lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;

&lt;h4&gt;Receive notifications on the client&lt;/h4&gt;

&lt;p&gt;Now we enter into the last part of preparing our client to receive notifications. We have to intimate the client to listen for notifications using a &lt;code&gt;Receiver&lt;/code&gt; and a &lt;code&gt;Service&lt;/code&gt; to handle the data from server.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;src/main/java/.../GCMReceiver.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Receiver code stating the necessary service &lt;code&gt;(GCMIntentService)&lt;/code&gt; to be triggered.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;public class GCMReceiver extends WakefulBroadcastReceiver{
    @Override
    public void onReceive(Context context, Intent intent) {
        ComponentName comp = new ComponentName(context.getPackageName(),GCMIntentService.class.getName());
        startWakefulService(context, (intent.setComponent(comp)));
        setResultCode(Activity.RESULT_OK);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;Update Androidmanifest&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/src/main/Androidmanifest.xml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;receiver
    android:name=&amp;quot;.GCMReceiver&amp;quot;
    android:exported=&amp;quot;true&amp;quot;
    android:permission=&amp;quot;com.google.android.c2dm.permission.SEND&amp;quot; &amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&amp;quot;com.google.android.c2dm.intent.RECEIVE&amp;quot; /&amp;gt;
        &amp;lt;category android:name=&amp;quot;com.example.gcm&amp;quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/receiver&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;blockquote&gt;
&lt;p&gt;src/main/java/.../GCMReceiver.java&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Service code for handling the notifications part. Here &lt;code&gt;MESSAGE_KEY&lt;/code&gt; is the expected key that is set from the server. &lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;public class GCMIntentService extends IntentService {
    String MESSAGE_KEY = &amp;quot;key1&amp;quot;;
    public GCMIntentService() {
        super(&amp;quot;Message&amp;quot;);
    }
    @Override
    protected void onHandleIntent(Intent intent) {
        Bundle extras = intent.getExtras();
        String message = intent.getStringExtra(MESSAGE_KEY);
        GoogleCloudMessaging gcm = GoogleCloudMessaging.getInstance(this);
        String messageType = gcm.getMessageType(intent);
        final int notificationID = (int) (Math.random() * 100000000);

        if (GoogleCloudMessaging.MESSAGE_TYPE_SEND_ERROR.equals(messageType)) {
            sendNotification(&amp;quot;GCM notification: Send error&amp;quot; + extras.toString(), notificationID);
        }else if (GoogleCloudMessaging.MESSAGE_TYPE_DELETED.equals(messageType)) {
            sendNotification(&amp;quot;Deleted messages on server&amp;quot; + extras.toString(), notificationID);
        }else if (GoogleCloudMessaging.MESSAGE_TYPE_MESSAGE.equals(messageType)) {
            sendNotification(message, notificationID);
        }
        GCMReceiver.completeWakefulIntent(intent);
    }

    private void sendNotification(String msg, int notificationID) {
        NotificationCompat.Builder builder = new NotificationCompat.Builder(this)
        .setSmallIcon(R.drawable.common_ic_googleplayservices);
        .setContentTitle(&amp;quot;Notification&amp;quot;);
        .setContentText(msg);
        Intent resultIntent = new Intent(this, MainActivity.class);
        PendingIntent resultPendingIntent = PendingIntent.getActivity(this,0,resultIntent, PendingIntent.FLAG_UPDATE_CURRENT);
        NotificationManager mNotifyMgr = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
        mNotifyMgr.notify(notificationID, builder.build());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;Update Androidmanifest&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;app/src/main/Androidmanifest.xml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;service
    android:name=&amp;quot;.GCMIntentService&amp;quot;
    android:exported=&amp;quot;false&amp;quot; &amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&amp;quot;com.google.android.c2dm.intent.RECEIVE&amp;quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/service&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;hr&gt;

&lt;p&gt;Now we are ready to check if our GCM component is working. Run the app in a device connected to internet, and open your server project folder from termial. Run &lt;code&gt;node node-gcm-sample.js&lt;/code&gt;.Source code for &lt;a href=&quot;https://github.com/shrikanthkr/android-gcm-client&quot;&gt;Android Client&lt;/a&gt; and &lt;a href=&quot;https://github.com/shrikanthkr/node-gcm-sample&quot;&gt;Node Server&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 08 Sep 2015 20:04:25 +0530</pubDate>
        <link>http://shrikanthkr.github.io/android/2015/09/08/android-gcm.html</link>
        <guid isPermaLink="true">http://shrikanthkr.github.io/android/2015/09/08/android-gcm.html</guid>
        
        <category>android,</category>
        
        <category>gcm,</category>
        
        <category>google</category>
        
        <category>cloud</category>
        
        <category>messaging</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Drawing borders in Android</title>
        <description>&lt;p&gt;To draw borders we have to understand the basics of layer-list drawable component. An exhaustive guide is provided by &lt;a href=&quot;http://developer.android.com/guide/topics/resources/drawable-resource.html#LayerList&quot;&gt;Android Developers Guide&lt;/a&gt;.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Code snippet to draw top and bottom borders:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;res/drawable/border.xml
&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;layer-list xmlns:android=&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&amp;gt;
&amp;lt;item&amp;gt;&amp;lt;!--Item 1--&amp;gt;
    &amp;lt;shape android:shape=&amp;quot;rectangle&amp;quot;&amp;gt;
        &amp;lt;stroke android:color=&amp;quot;@color/green&amp;quot;   android:width=&amp;quot;2dp&amp;quot;/&amp;gt;
        &amp;lt;solid android:color=&amp;quot;#FFFFFFFF&amp;quot; /&amp;gt;
    &amp;lt;/shape&amp;gt;
&amp;lt;/item&amp;gt;
&amp;lt;item android:top=&amp;quot;2dp&amp;quot; android:bottom=&amp;quot;2dp&amp;quot;&amp;gt;&amp;lt;!--Item 2--&amp;gt;
    &amp;lt;shape android:shape=&amp;quot;rectangle&amp;quot;&amp;gt;
        &amp;lt;solid android:color=&amp;quot;#FFFFFFFF&amp;quot; /&amp;gt;
    &amp;lt;/shape&amp;gt;
&amp;lt;/item&amp;gt;
&amp;lt;/layer-list&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5&gt;How layer list works?&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Layer One&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;item&amp;gt;&amp;lt;!--Item 1--&amp;gt;
    &amp;lt;shape android:shape=&amp;quot;rectangle&amp;quot;&amp;gt;
        &amp;lt;stroke android:color=&amp;quot;@color/green&amp;quot; android:width=&amp;quot;2dp&amp;quot;/&amp;gt;
        &amp;lt;solid android:color=&amp;quot;#FFFFFFFF&amp;quot; /&amp;gt;
    &amp;lt;/shape&amp;gt;
&amp;lt;/item&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Above code snippet results in a layer with border on all sides. &lt;strong&gt;Stroke&lt;/strong&gt; tag defines the border and &lt;strong&gt;Solid&lt;/strong&gt; tag defines the background colour.&lt;/p&gt;

&lt;h5&gt;&lt;img src=&quot;/assets/article_images/borders-android/layer-one.png&quot; alt=&quot;Layer One&quot;&gt;&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;Layer Two&lt;/li&gt;
&lt;/ul&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-markup'&gt;&amp;lt;item android:top=&amp;quot;2dp&amp;quot; android:bottom=&amp;quot;2dp&amp;quot;&amp;gt;&amp;lt;!--Item 2--&amp;gt;
    &amp;lt;shape android:shape=&amp;quot;rectangle&amp;quot;&amp;gt;
        &amp;lt;solid android:color=&amp;quot;#FFFFFFFF&amp;quot; /&amp;gt;
    &amp;lt;/shape&amp;gt;
&amp;lt;/item&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This snippet is drawn over the first layer which has top offset 2dp and bottom offset 2dp (border thickness)&lt;/p&gt;

&lt;h5&gt;&lt;img src=&quot;/assets/article_images/borders-android/both-layers.png&quot; alt=&quot;Layer One And Two&quot;&gt;&lt;/h5&gt;
</description>
        <pubDate>Mon, 07 Sep 2015 20:04:25 +0530</pubDate>
        <link>http://shrikanthkr.github.io/android/2015/09/07/borders-android.html</link>
        <guid isPermaLink="true">http://shrikanthkr.github.io/android/2015/09/07/borders-android.html</guid>
        
        <category>android,</category>
        
        <category>border</category>
        
        
        <category>android</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll! Shrikanth</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve --watch&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-ruby'&gt;def print_hi(name)
  puts &amp;quot;Hi, #{name}&amp;quot;
end
print_hi(&amp;#39;Tom&amp;#39;)
#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

&lt;div&gt;
  &lt;pre data-line=''&gt;&lt;code class='language-javascript'&gt;var obj = { &amp;#39;foo&amp;#39;: true, &amp;#39;bar&amp;#39;: false };

for (key in obj) {
  console.log(obj[key]);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 29 Aug 2014 20:04:25 +0530</pubDate>
        <link>http://shrikanthkr.github.io/jekyll/update/2014/08/29/welcome-to-jekyll-shri.html</link>
        <guid isPermaLink="true">http://shrikanthkr.github.io/jekyll/update/2014/08/29/welcome-to-jekyll-shri.html</guid>
        
        <category>featured</category>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
